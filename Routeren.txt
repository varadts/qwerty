An operator has channels from 900 MHz, 1800 MHz and 1900 MHz mobile 
spectrum. Total subscribers in zone 1= 10000, zone 2= 15000 and zone 3=
5000.
Prepare a frequency reuse strategy for all zones with respect to spectrum 
efficiency utilization, co-channel interference and optimum revenue
generation.
Consideration: Assume suitable data, system should dynamically allocate 
channels and ensure that there are minimal call drops.
Zone 1= Total area of 25 km
radius Zone 2= Total area of 30
km radius Zone 3= Total area of
15 km radius Use GSM Standards 
(2G to 3G)
Total number of calls for service at a time: 25 (Last two digits of your roll 
number)
Solution:
Assumptions: -
Generation: 2G
Frequency band: 900 MHz, 1800 MHz and 1900 MHz 
Standard: GSM
Total available bandwidth: Uplink: 890 MHz to 915 MHz (25 MHz)
Downlink: 935 MHz to 960 MHz (25 MHz) 
Bandwidth per channel: 200 KHz
Number of available channels: 124 Full Duplex 
Radius of hexagonal cell (R): 0.5 km

Area of Zone = 𝜋𝑟2= 𝜋252= 1963.50 sq. km 

Cluster size or Frequency Reuse Ratio (S)= 3

Area of Cluster= S* 3√3*R2 = 1.95 sq. km

2

Number of Clusters: 

𝐴𝑟𝑒𝑎 𝑜𝑓 𝑍𝑜𝑛𝑒

𝐴𝑟𝑒𝑎 𝑜𝑓 𝐶𝑙𝑢𝑠𝑡𝑒𝑟

= 1007

Subscriber Density= 𝑇𝑜𝑡𝑎𝑙 𝑆𝑢𝑏𝑠𝑐𝑟𝑖𝑏𝑒𝑟𝑠 𝑖𝑛 𝑍𝑜𝑛𝑒 = 5 per sq. km

𝐴𝑟𝑒𝑎 𝑜𝑓 𝑍𝑜𝑛𝑒

Total Channels per Cluster = 10 full duplex channels operating at 900 MHz

Subscribers which can be served= Total Channels per Cluster * Number of 

Clusters = 10070

ZONE 2:

Area of Zone = 𝜋𝑟2= 𝜋302= 2827.50 sq. km 

Cluster size or Frequency Reuse Ratio (S)= 4

Area of Cluster= S* 3√3*R2 = 2.60 sq. km

2

Number of Clusters: 

𝐴𝑟𝑒𝑎 𝑜𝑓 𝑍𝑜𝑛𝑒

𝐴𝑟𝑒𝑎 𝑜𝑓 𝐶𝑙𝑢𝑠𝑡𝑒𝑟

= 1088

Subscriber Density= 𝑇𝑜𝑡𝑎𝑙 𝑆𝑢𝑏𝑠𝑐𝑟𝑖𝑏𝑒𝑟𝑠 𝑖𝑛 𝑍𝑜𝑛𝑒 = 5 per sq. km

𝐴𝑟𝑒𝑎 𝑜𝑓 𝑍𝑜𝑛𝑒

Total Channels per Cluster = 15 full duplex channels operating at 1800 MHz

Subscribers which can b

Cluster size or Frequency Reuse Ratio (S)=2

Area of Cluster= S* 3√3*R2 = 1.30 sq. km

2

Number of Clusters: 

𝐴𝑟𝑒𝑎 𝑜𝑓 𝑍𝑜𝑛𝑒

𝐴𝑟𝑒𝑎 𝑜𝑓 𝐶𝑙𝑢𝑠𝑡𝑒𝑟

= 544

Subscriber Density= 𝑇𝑜𝑡𝑎𝑙 𝑆𝑢𝑏𝑠𝑐𝑟𝑖𝑏𝑒𝑟𝑠 𝑖𝑛 𝑍𝑜𝑛𝑒 = 7 per sq. km

𝐴𝑟𝑒𝑎 𝑜𝑓 𝑍𝑜𝑛𝑒

Total Channels per Cluster = 10 full duplex channels operating at 1900 MHz

Subscribers which can be served= Total Channels per Cluster * Number of 

Clusters= 5440

Blocking Probability Considerations:

To integrate the concept of blocking probability, we need to consider the 

capacity of the network in terms of the number of subscribers it can handle 

simultaneously without exceeding a certain blocking probability threshold.

Let's calculate the blocking probability for each zone based on the provided

data and then adjust the channel allocation strategy accordingly to minimize 

call drops.

We'll use the Erlang B formula to calculate the blocking probability:

𝐴

𝑁

𝑃𝑏 = 𝑁!

∑𝑁−1 𝐴𝑥

+

𝐴𝑁

Where:

Pb is the blocking

probability.

𝑥=0 𝑥! 𝑁!

Ais the traffic intensity (the average number of simultaneous

calls). N is the number of available channels.

Given that the total number of calls for service at a time is 25, let's calculate

the traffic intensity for each zone a

importnumpy as np 
c1=[1,1,1,1] 
c2=[1,-1,1,-1] 
c3=[1,1,-1,-1] 
c4=[1,-1,-1,1] 
rc=[] 
print("Enter the data bits :") 
d1=int(input("Enter D1 :")) 
d2=int(input("Enter D2 :")) 
d3=int(input("Enter D3 :")) 
d4=int(input("Enter D4 :")) 
r1=np.multiply(c1,d1) 
r2=np.multiply(c2,d2) 
r3=np.multiply(c3,d3) 
r4=np.multiply(c4,d4) 
resultant_channel=r1+r2+r3+r4; 
print("Resultant Channel",resultant_channel) 
Channel=int(input("Enter the station to listen for C1=1 ,C2=2, C3=3 C4=4 : ")) 
if Channel==1: 
rc=c1 
elif Channel==2: 
rc=c2 
elif Channel==3: 
rc=c3 
elif Channel==4: 
rc=c4 
inner_product=np.multiply(resultant_channel,rc) 
print("Inner Product",inner_product) 
res1=sum(inner_product) 
data=res1/len(inner_product) 
print("Data bit that was sent",data) 













Router>en
Router#int f0/0
^
% Invalid input detected at '^' marker.
Router#config t
Enter configuration commands, one per line. End with CNTL/Z.
Router(config)#int f0/0
Router(config-if)#ip addr 192.168.10.1 255.255.255.0
Router(config-if)#int f0/1
Router(config-if)#ip addr 192.168.20.1
% Incomplete command.
Router(config-if)#ip addr 192.168.20.1 255.255.255.0
Router(config-if)#int f90/0
^
% Invalid input detected at '^' marker.
Router(config-if)#int f0/0
Router(config-if)#ip dhcp pool lab1
Router(dhcp-config)#network 192.168.10.1
% Incomplete command.
Router(dhcp-config)#network 192.168.10.1 255.255.255.0
Router(dhcp-config)#default-router 192.168.1.1
Router(dhcp-config)#dns-server 8.8.8.8
Router(dhcp-config)#exit
Router(config)#int f0/1
Router(config-if)#ip dhcp pool lab2
Router(dhcp-config)#network 192.168.20.1 255.255.255.0
Router(dhcp-config)#deafult-router 192.168.1.1
^
% Invalid input detected at '^' marker.
Router(dhcp-config)#default-router 192.168.1.1
Router(dhcp-config)#dns-server 10.10.10.10
Router(dhcp-config)#exit
Router(config)#int f0/0
Router(config-if)#no shutdown

Router(config-if)#
%LINK-5-CHANGED: Interface FastEthernet0/0, changed state to up

%LINEPROTO-5-UPDOWN: Line protocol on Interface FastEthernet0/0, changed state to up

Router(config-if)#int f0/1
Router(config-if)#no shutdown

Router(config-if)#
%LINK-5-CHANGED: Interface FastEthernet0/1, changed state to up

%LINEPROTO-5-UPDOWN: Line protocol on Interface FastEthernet0/1, changed state to up

Router(config-if)#exit
Router(config)#exit
Router#
%SYS-5-CONFIG_I: Configured from console by console

Router#sh run| sec dhcp
^
% Invalid input detected at '^' marker.
Router#sh run | sec dhcp
ip dhcp pool lab1
network 192.168.10.0 255.255.255.0
default-router 192.168.1.1
dns-server 8.8.8.8
ip dhcp pool lab2
network 192.168.20.0 255.255.255.0
default-router 192.168.1.1
dns-server 10.10.10.10
Router#
Router#





N = 10^6; % number of bits or symbols
rand('state',100); % initializing the rand() function
randn('state',200); % initializing the randn() function

% Transmitter
ip = rand(1,N)>0.5; % generating 0,1 with equal probability
s = 2*ip-1; % BPSK modulation: 0 -> -1; 1 -> 1
n = 1/sqrt(2)*[randn(1,N) + j*randn(1,N)]; % white Gaussian noise, 0dB variance
Eb_N0_dB = [-3:10]; % multiple Eb/N0 values

for ii = 1:length(Eb_N0_dB)
    % Noise addition
    y = s + 10^(-Eb_N0_dB(ii)/20)*n; % additive white Gaussian noise
    % Receiver - hard decision decoding
    ipHat = real(y)>0;
    
    % Counting the errors
    nErr(ii) = size(find([ip- ipHat]),2);
end

simBer = nErr/N; % simulated BER
theoryBer = 0.5*erfc(sqrt(10.^(Eb_N0_dB/10))); % theoretical BER

% Plot
figure;
semilogy(Eb_N0_dB,theoryBer,'b.-'); hold on;
semilogy(Eb_N0_dB,simBer,'mx-');
axis([-3 10 10^-5 0.5]);
grid on;
legend('theory', 'simulation');
xlabel('Eb/No, dB');
ylabel('Bit Error Rate');
title('Bit error probability curve for BPSK modulation');






clc;

% Define the order of the Walsh code
order = 8;

% Generate the Hadamard matrix of the specified order
H = hadamard(order);

% Select the rows of the Hadamard matrix as Walsh codes for each station
c1 = H(1,:);
c2 = H(2,:);
c3 = H(3,:);
c4 = H(4,:);
% Display the Walsh codes
disp('Walsh codes for each station:');
disp(['Station 1: ', num2str(c1)]);
disp(['Station 2: ', num2str(c2)]);
disp(['Station 3: ', num2str(c3)]);
disp(['Station 4: ', num2str(c4)]);

    fprintf('Enter the data bits:\n');
    d1 = input('Enter D1: ');
    d2 = input('Enter D2: ');
    d3 = input('Enter D3: ');
    d4 = input('Enter D4: ');

    % Multiply each station's data bits with its respective code
    r1 = c1 * d1;
    r2 = c2 * d2;
    r3 = c3 * d3;
    r4 = c4 * d4;
    
    resultant_channel = r1 + r2 + r3 + r4 ;
while true
    Channel = input('Enter the station no: ');

    if Channel == 0
        break; 
    end

    switch Channel
        case 1
            rc = c1;
        case 2
            rc = c2;
        case 3
            rc = c3;
        case 4
            rc = c4;
        otherwise
            error('Invalid station selected.');
    end

    inner_product = resultant_channel .* rc;

    data = sum(inner_product) / length(inner_product);

    fprintf('Data bit that was sent: %f\n', data);
end




clc
N = 10^6; % number of bits or symbols
rand(100); % initializing the random number generator
randn('state',200); % initializing the randn() function

% Transmitter
ip = rand(1,N)>0.5; % generating 0,1 with equal probability
s = 2*ip-1; % BPSK modulation 0 -> -1; 1 -> 1

% AWGN Channel
n_AWGN = 1/sqrt(2)*[randn(1,N) + 1i*randn(1,N)]; % white Gaussian noise, 0dB variance

Eb_N0_dB = (-3:60); % multiple Eb/N0 values

% AWGN Simulation
nErr_AWGN = zeros(size(Eb_N0_dB));
for ii = 1:length(Eb_N0_dB)
    % Noise addition
    y_AWGN = s + 10^(-Eb_N0_dB(ii)/20)*n_AWGN; % additive white Gaussian noise
    % Receiver - hard decision decoding
    ipHat_AWGN = real(y_AWGN)>0;
    % Counting the errors
    nErr_AWGN(ii) = sum(ip ~= ipHat_AWGN);
end
simBer_AWGN = nErr_AWGN/N; % simulated BER
theoryBer_AWGN = 0.5*erfc(sqrt(10.^(Eb_N0_dB/10))); % theoretical BER for AWGN

% Plot AWGN
figure
semilogy(Eb_N0_dB, theoryBer_AWGN,'b.-');
hold on
semilogy(Eb_N0_dB, simBer_AWGN,'mx-');
axis([-3 10 1e-5 0.5])
grid on
legend('AWGN Theory', 'AWGN Simulation');
xlabel('Eb/No, dB');
ylabel('Bit Error Rate');
title('Bit error probability curve for BPSK modulation in AWGN channel');

% Rayleigh Channel
h = 1/sqrt(2)*[randn(1,N) + 1i*randn(1,N)]; % Rayleigh fading channel
n_AWGN = 1/sqrt(2)*[randn(1,N) + 1i*randn(1,N)]; % white Gaussian noise, 0dB variance
n_Rayleigh = h.*n_AWGN; % multiply by Rayleigh fading coefficients

% Rayleigh Simulation
nErr_Rayleigh = zeros(size(Eb_N0_dB));
for ii = 1:length(Eb_N0_dB)
    % Noise addition
    y_Rayleigh = s + 10^(-Eb_N0_dB(ii)/20)*n_Rayleigh; % additive noise in Rayleigh channel
    % Receiver - hard decision decoding
    ipHat_Rayleigh = real(y_Rayleigh)>0;
    % Counting the errors
    nErr_Rayleigh(ii) = sum(ip ~= ipHat_Rayleigh);
end
simBer_Rayleigh = nErr_Rayleigh/N; % simulated BER
theoryBer_Rayleigh = 0.5*(1-sqrt(10.^(Eb_N0_dB/10)./(1+10.^(Eb_N0_dB/10)))); % theoretical BER for Rayleigh

% Plot Rayleigh
figure
semilogy(Eb_N0_dB, theoryBer_AWGN,'b.-');
hold on
semilogy(Eb_N0_dB, theoryBer_Rayleigh,'g--');
semilogy(Eb_N0_dB, simBer_Rayleigh,'r.-','MarkerSize',4); % Reduce marker size
axis([-3 10 1e-5 0.5])
grid on
legend('AWGN Theory', 'Rayleigh Theory', 'Rayleigh Simulation');
xlabel('Eb/No, dB');
ylabel('Bit Error Rate');
title('Bit error probability curve for BPSK modulation in Rayleigh fading channel');













server

import socket
import os
soc = socket.socket()
host = "127.0.0.1"
port = 8084
soc.bind((host,port))
soc.listen(1)
print("Host Name:",host)
print("Waiting For Client To Connect")
conn, addr =soc.accept()
print(addr, "Client Has Connected To Server")
fileName = input(str("File Name:"))
file = open(fileName, 'rb')
fileData = file.read(1024)
conn.send(fileData)
print("File Sent")


client

import socket
soc=socket.socket()
host = input(str("Enter Host Address:"))
port = 8084
soc.connect((host,port))
print("Connected To Server")
incFile = input(str("Enter Incoming File Name:"))
file= open(incFile, 'wb')
incFileDat =soc.recv(1024)
file.write (incFileDat)
file.close()
print("File Recieved")
f = open(incFile, 'r')
recFileContent = f.read()
print("Recieved File Is:",recFileContent)









import socket 
Server_ip="localhost" 
Server_host=8002 
FORMAT="utf-8" 
CS=socket.socket(socket.AF_INET,socket.SOCK_STREAM) 
CS.connect((Server_ip, Server_host)) 
file = open("data/abc.txt","r") 
data=file.read() 
CS.send("abc.txt".encode(FORMAT)) 
msg=CS.recv(1024) 
print( msg) 
CS.send(data.encode(FORMAT)) 
msg=CS.recv(1024) 
print(msg) 



server
import socket 
Server_ip="localhost" 
Server_host=8002 
FORMAT="utf-8" 
SS=socket.socket(socket.AF_INET,socket.SOCK_STREAM) 
SS.bind((Server_ip,Server_host)) 
SS.listen(5) 
s1, addr=SS.accept() 
file_name= s1.recv(1024).decode(FORMAT) 
print(file_name) 
file=open(file_name,"w")  
s1.send("File name received") 
data=s1.recv(1024).decode(FORMAT) 
print("File data received") 
s1.send("File data received") 
file.write(data) 
file.close() 
